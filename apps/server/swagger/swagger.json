{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Online Library",
    "description": "API for Online Library"
  },
  "servers": [
    {
      "url": "http://localhost:3001/"
    }
  ],
  "paths": {
    "/api/user/auth/register": {
      "post": {
        "tags": [
          "Auth (rate limited)"
        ],
        "summary": "Account registration",
        "description": "   ✅ Checks if user already exist <br />   ✅ Generates an <b>activation token</b> <br />   ✅ Sends link with the <b>token</b> to allow user activate his account <br />   ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Activate account by clicking the link that has been sent to you"
          },
          "409": {
            "description": "Email address already taken"
          },
          "422": {
            "description": "Data validation failed"
          },
          "429": {
            "description": "Too many requests"
          },
          "502": {
            "description": "There was a problem sending the activation link"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/register"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/register"
              }
            }
          }
        }
      }
    },
    "/api/user/auth/account-activation": {
      "post": {
        "tags": [
          "Auth (rate limited)"
        ],
        "summary": "Account activation",
        "description": "   ✅ Check if user already activated his account <br />   ✅ Toggles account as activated if it's not alread <br />   ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Account activated, you can login now"
          },
          "403": {
            "description": "Account already activated"
          },
          "409": {
            "description": "No authentication associated with this link"
          },
          "422": {
            "description": "Data validation failed"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/activateAccount"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/activateAccount"
              }
            }
          }
        }
      }
    },
    "/api/user/auth/activation-token-resend": {
      "post": {
        "tags": [
          "Auth (rate limited)"
        ],
        "summary": "Account activation",
        "description": "   ✅ Ensures user with provided email address exists <br />   ✅ Rejects resending activation token if account is already activate <br />   ✅ Sends new activation token to the use <br />   ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Link with new activation token has been sent"
          },
          "403": {
            "description": "Account already activated"
          },
          "404": {
            "description": "Provided email address is invalid"
          },
          "422": {
            "description": "Data validation failed"
          },
          "429": {
            "description": "Too many requests"
          },
          "502": {
            "description": "There was a problem sending the activation link"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resendActivationToken"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/resendActivationToken"
              }
            }
          }
        }
      }
    },
    "/api/user/auth/login": {
      "post": {
        "tags": [
          "Auth (rate limited)"
        ],
        "summary": "Authentication",
        "description": "   ✅ Checks given email and password <br />   ✅ Check if account is activated <br />   ✅ Sends auth token, that expires in 24h, if credentials are ok<br />   ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Auth token was set in cookies"
          },
          "401": {
            "description": "The given credentials are wrong"
          },
          "403": {
            "description": "Account not activated"
          },
          "422": {
            "description": "Data validation failed"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/login"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/login"
              }
            }
          }
        }
      }
    },
    "/api/user/auth/login/fb": {
      "post": {
        "tags": [
          "Auth (rate limited)"
        ],
        "summary": "Authentication",
        "description": "   ✅ Verifies <b>access token</b> provided by FB auth <br />   ✅ Sends <b>auth token</b>, that expires in 24h, for either already existing user or newly created one <br />   ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Auth token was set in cookies"
          },
          "400": {
            "description": "FB authentication has failed"
          },
          "422": {
            "description": "Data validation failed"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/loginWithFacebook"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/loginWithFacebook"
              }
            }
          }
        }
      }
    },
    "/api/user/auth/password-recovery": {
      "post": {
        "tags": [
          "Auth (rate limited)"
        ],
        "summary": "Password recovery",
        "description": "   ✅ Checks if any user belongs to provided email address <br />   ✅ Makes sure that user account is activated <br />   ✅ Generates <b>password token</b> to authorize changing password in the next step (password form) <br />   ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Link to reset the password has been sent"
          },
          "404": {
            "description": "An incorrect email address was provided"
          },
          "409": {
            "description": "Account must be firstly activated"
          },
          "422": {
            "description": "Data validation failed"
          },
          "429": {
            "description": "Too many requests"
          },
          "502": {
            "description": "There was a problem sending the link to reset password"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/recoverPassword"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/recoverPassword"
              }
            }
          }
        }
      }
    },
    "/api/user/auth/password-token-check": {
      "post": {
        "tags": [
          "Auth (rate limited)"
        ],
        "summary": "Password recovery",
        "description": "   ✅ Checks password token generated by <b>/api/user/auth/recoverPassword</b> <br />   ✅ Checks if there is a user with email address as kept in password token <br />   ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Password token is valid"
          },
          "400": {
            "description": "Link to reset the password is invalid"
          },
          "422": {
            "description": "Data validation failed"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/checkPasswordToken"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/checkPasswordToken"
              }
            }
          }
        }
      }
    },
    "/api/user/auth/password-change": {
      "put": {
        "tags": [
          "Auth (rate limited)"
        ],
        "summary": "Password change",
        "description": "   ✅ Changes user password <br />   ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Password has been changed"
          },
          "400": {
            "description": "Link to reset the password is invalid"
          },
          "422": {
            "description": "Data validation failed"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/changePassword"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/changePassword"
              }
            }
          }
        }
      }
    },
    "/api/user/books/suggestions": {
      "post": {
        "tags": [
          "Books"
        ],
        "description": "   ✅ Suggest books by author or title <br />   ✅ Searches either books assigned to the user or from the whole store <br />   ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns array of books that meet certain title or author",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/book"
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/book"
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/getSuggestions"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/getSuggestions"
              }
            }
          }
        }
      }
    },
    "/api/user/cart/stripe/payment": {
      "post": {
        "tags": [
          "Cart"
        ],
        "summary": "Finalizing purchase",
        "description": "   ✅ Makes sure that user does not pay for already purchased books <br />   ✅ Checks if selected books are still available in the store <br />   ✅ Processes stripe payment with credit card <br />   ✅ Assigns purchased books to the user <br />   ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully purchased new books"
          },
          "402": {
            "description": "Payment has failed"
          },
          "404": {
            "description": "Selected books are not available anymore"
          },
          "409": {
            "description": "You have already purchased selected books before"
          },
          "422": {
            "description": "Data validation failed"
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/stripePayment"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/stripePayment"
              }
            }
          }
        }
      }
    },
    "/api/user/cart/paypal/checkout": {
      "post": {
        "tags": [
          "Cart"
        ],
        "summary": "Finalizing purchase",
        "description": "   ✅ Makes sure that user does not pay for already purchased books <br />   ✅ Checks if selected books are still available in the store <br />   ✅ Prepares paypal payment details <br />   ✅ Redirects user to paypal checkout <br />   ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns paypal checkout link",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paypalApprovalLink"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/paypalApprovalLink"
                }
              }
            }
          },
          "402": {
            "description": "There was a problem preparing the payment, try again"
          },
          "404": {
            "description": "Selected books are not available anymore"
          },
          "409": {
            "description": "You have already purchased selected books before"
          },
          "422": {
            "description": "Data validation failed"
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createPayPalPayment"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/createPayPalPayment"
              }
            }
          }
        }
      }
    },
    "/api/user/cart/paypal/payment": {
      "post": {
        "tags": [
          "Cart"
        ],
        "summary": "Finalizing purchase",
        "description": "   ✅ Checks if user booked paymeny with certain id <br />   ✅ Checks if payment is still in progress <br />   ✅ Finalizes paypal payment and updates its status <br />   ✅ Assigns purchased books to the user <br />   ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully purchased new books"
          },
          "402": {
            "description": "Payment has failed"
          },
          "404": {
            "description": "Bad payment id"
          },
          "409": {
            "description": "The order has been already approved"
          },
          "422": {
            "description": "Data validation failed"
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/executePayPalPayment"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/executePayPalPayment"
              }
            }
          }
        }
      }
    },
    "/api/user/chat/messages": {
      "post": {
        "tags": [
          "Chat"
        ],
        "description": "   ✅ Returns some of the previous messages (implements infinite scroll) <br />   ✅ Mark messages as read by user that requested this endpoint <br />   ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return array of messages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/message"
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/message"
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Data validation failed"
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/getMessages"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/getMessages"
              }
            }
          }
        }
      }
    },
    "/api/user/chat/message": {
      "post": {
        "tags": [
          "Chat"
        ],
        "description": "   ✅ Sends text message to others <br />   ✅ Sends push notification <br />   ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Message has been sent"
          },
          "422": {
            "description": "Data validation failed"
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sendMessage"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/sendMessage"
              }
            }
          }
        }
      }
    },
    "/api/user/chat/file": {
      "post": {
        "tags": [
          "Chat"
        ],
        "summary": "Sending file",
        "description": "   ✅ If file is an image it reduces its size <br />   ✅ Validates size & extension of the file <br />   ✅ Uploads file to cloudinary <br />   ✅ Sends file / image / video to others <br />   ✅ Sends proper push notification <br />   ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "File has been sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sendFileResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/sendFileResponse"
                }
              }
            }
          },
          "413": {
            "description": "File size too large"
          },
          "415": {
            "description": "Such file is not supported"
          },
          "422": {
            "description": "File has not been attached"
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "$ref": "#/components/schemas/sendFile"
          }
        }
      }
    },
    "/api/user/chat/push-notifications": {
      "post": {
        "tags": [
          "Chat"
        ],
        "description": "   ✅ Stores web push subscription detail in the database <br />   ✅ Creates many subscriptions per user (user can use multiple devices) <br />   ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Subscription has been stored"
          },
          "422": {
            "description": "Data validation failed"
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subscription"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/subscription"
              }
            }
          }
        }
      }
    },
    "/api/user/chat/messages/info": {
      "get": {
        "tags": [
          "Chat"
        ],
        "description": "   ✅ Returns info related to chatting <br />   ✅ Counts how many messages user missed since last view <br />   ✅ Returns index of last undread message so user can easily scroll to it <br />   ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Info returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/messagesInfo"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/messagesInfo"
                }
              }
            }
          },
          "422": {
            "description": "Data validation failed"
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/api/user/global/token-check": {
      "get": {
        "tags": [
          "Global"
        ],
        "description": "   ✅ Checks existance of <b>auth token</b> in cookies and validates it <br />   ✅ Returns proper role to the end user <br />   ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return array of messages",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/role"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/role"
                }
              }
            }
          },
          "422": {
            "description": "Data validation failed"
          }
        }
      }
    },
    "/api/user/global/logout": {
      "get": {
        "tags": [
          "Global"
        ],
        "description": "   ✅ Logs user out <br />   ✅ Removes auth token from cookies <br />   ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return array of messages",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/role"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/role"
                }
              }
            }
          },
          "422": {
            "description": "Data validation failed"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "book": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "type": "string",
            "example": "Hound Dog"
          },
          "author": {
            "type": "string",
            "example": "Nina Barton"
          },
          "cover": {
            "type": "string",
            "format": "uri",
            "qt-uri-protocols": [
              "https"
            ],
            "example": "https://loremflickr.com/640/480/nature?78445"
          },
          "price": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Price in $",
            "example": 14
          }
        }
      },
      "paypalApprovalLink": {
        "type": "string",
        "required": true,
        "description": "Link to paypal checkout generated with /createPayPalPayment",
        "example": "https://www.sandbox.paypal.com/cgi-bin/webscr?cmd=_express-checkout&token=EC-27H754218P7505C"
      },
      "message": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "MESSAGE",
              "IMAGE",
              "VIDEO",
              "FILE"
            ]
          },
          "content": {
            "type": "string",
            "format": "uri",
            "qt-uri-protocols": [
              "https"
            ],
            "qt-uri-extensions": [
              "jpg",
              "jpeg",
              "png",
              "mp4",
              "txt",
              "rtf",
              "doc",
              "docx",
              "xlsx",
              "ppt",
              "pptx",
              "pdf"
            ],
            "description": "Link to uploaded resource",
            "example": "https://res.cloudinary.com/onlinelibrary-storage/raw/upload/v1662546764/111296ee27d2a82152225969d92eb660a16d16b041d3712e0ee860ae01ed78a8e01bc77f4b888fb0681cebba0ec619bb10012b3a3cfee8c_fbhuen.txt"
          },
          "filename": {
            "type": "string",
            "description": "Name of uploaded file",
            "example": "text.txt"
          },
          "readBy": {
            "type": "string",
            "description": "String as joined array of user ids that read certain message",
            "example": "1,51,62,6,23"
          },
          "cloudinaryId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Id of resource kept at cloudinary",
            "example": "1c644911e2118030c4884278c6835ccd79e0062959dcaa15af09861ae82c2e7bb73b4d53cf7a865255f1d01d2c15653748986ec09ccfb61b0e0163ce_o8qd1l"
          },
          "userId": {
            "type": "integer"
          },
          "user": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            }
          }
        }
      },
      "sendFileResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "MESSAGE",
              "IMAGE",
              "VIDEO",
              "FILE"
            ]
          },
          "content": {
            "type": "string",
            "format": "uri",
            "qt-uri-protocols": [
              "https"
            ],
            "qt-uri-extensions": [
              "jpg",
              "jpeg",
              "png",
              "mp4",
              "txt",
              "rtf",
              "doc",
              "docx",
              "xlsx",
              "ppt",
              "pptx",
              "pdf"
            ],
            "description": "Link to uploaded resource",
            "example": "https://res.cloudinary.com/onlinelibrary-storage/raw/upload/v1662546764/111296ee27d2a82152225969d92eb660a16d16b041d3712e0ee860ae01ed78a8e01bc77f4b888fb0681cebba0ec619bb10012b3a3cfee8c_fbhuen.txt"
          }
        }
      },
      "subscription": {
        "type": "object",
        "properties": {
          "endpoint": {
            "type": "string",
            "format": "uri",
            "qt-uri-protocols": [
              "https"
            ],
            "description": "Subscription details (check out https://www.npmjs.com/package/web-push)",
            "example": "https://fcm.googleapis.com/fcm/send/d61c5u920dw:APA91bEmnw8utjDYCqSRplFMVCzQMg9e5XxpYajvh37mv2QIlISdasBFLbFca9ZZ4Uqcya0ck-SP84YJUEnWsVr3mwYfaDB7vGtsDQuEpfDdcIqOX_wrCRkBW2NDWRZ9qUz9hSgtI3sY"
          },
          "expirationTime": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ]
          },
          "keys": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "p256dh": {
                "type": "string",
                "required": true,
                "example": "BL7ELU24fJTAlH5Kyl8N6BDCac8u8li_U5PIwG963MOvdYs9s7LSzj8x_7v7RFdLZ9Eap50PiiyF5K0TDAis7t0"
              },
              "auth": {
                "type": "string",
                "required": true,
                "example": "juarI8x__VnHvsOgfeAPHg"
              }
            }
          }
        }
      },
      "messagesInfo": {
        "type": "object",
        "properties": {
          "lastUnreadMessageIndex": {
            "type": "integer",
            "required": true,
            "description": "Index of last unread message"
          },
          "unreadMessagesAmount": {
            "type": "integer",
            "required": true,
            "description": "Amount of missed messages"
          },
          "userId": {
            "type": "integer",
            "required": true,
            "description": "Id of logged in user"
          }
        }
      },
      "role": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "guest",
              "user"
            ]
          }
        }
      },
      "plain": {
        "type": "string",
        "example": "plain text",
        "xml": {
          "name": "plain"
        }
      },
      "paypalPaymentId": {
        "type": "string",
        "example": "",
        "xml": {
          "name": "paypalPaymentId"
        }
      },
      "paypalPayerID": {
        "type": "string",
        "example": "",
        "xml": {
          "name": "paypalPayerID"
        }
      },
      "register": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "required": true,
            "example": "John"
          },
          "email": {
            "type": "string",
            "format": "email",
            "required": true,
            "example": "john@onlinelibrary.com"
          },
          "password": {
            "type": "string",
            "required": true,
            "example": "2hIq8^spf2"
          },
          "repeatedPassword": {
            "type": "string",
            "required": true,
            "example": "2hIq8^spf2"
          }
        }
      },
      "activateAccount": {
        "type": "object",
        "properties": {
          "activationToken": {
            "type": "string",
            "required": true,
            "description": "jwt token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
          }
        }
      },
      "resendActivationToken": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "required": true,
            "example": "john@onlinelibrary.com"
          }
        }
      },
      "login": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "required": true,
            "example": "john@onlinelibrary.com"
          },
          "password": {
            "type": "string",
            "required": true,
            "example": "2hIq8^spf2"
          }
        }
      },
      "loginWithFacebook": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "required": true,
            "example": "John"
          },
          "email": {
            "type": "string",
            "format": "email",
            "required": true,
            "example": "john@onlinelibrary.com"
          },
          "access_token": {
            "type": "string",
            "required": true,
            "description": "Access token generated with FB auth",
            "example": "EAAG6VehVAPMBAK30w7QenD65zUARr9d4P3yQf44X5anasd6QnjtEtXH2c7TG234fsBMchb4Pe"
          }
        }
      },
      "recoverPassword": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "required": true,
            "example": "john@onlinelibrary.com"
          }
        }
      },
      "checkPasswordToken": {
        "type": "object",
        "properties": {
          "passwordToken": {
            "type": "string",
            "required": true,
            "description": "jwt token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
          }
        }
      },
      "changePassword": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "required": true,
            "example": "2hIq8^spf2"
          },
          "passwordToken": {
            "type": "string",
            "required": true,
            "description": "jwt token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
          }
        }
      },
      "purchaseBooksWithStripe": {
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "string",
            "required": true,
            "description": "Payment method id, created with stripejs package on the client side",
            "example": "pm_1LeJuTCA0Hw88eOYpY9kEDWK"
          },
          "products": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "required": true,
            "description": "Array of book ids to purchase",
            "example": [
              1,
              5,
              9,
              11
            ]
          }
        }
      },
      "createPayPalPayment": {
        "type": "object",
        "properties": {
          "products": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "required": true,
            "description": "Array of book ids to purchase",
            "example": [
              1,
              5,
              9,
              11
            ]
          }
        }
      },
      "executePayPalPayment": {
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "string",
            "required": true,
            "description": "Payment id generated after submitting paypal checkout",
            "example": "PAYID-MMKLWRQ82689537V0194325L"
          },
          "PayerID": {
            "type": "string",
            "required": true,
            "description": "Payer id generated after submitting paypal checkout",
            "example": "KVYVDZAMZGRRA"
          }
        }
      },
      "getSuggestions": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "required": true,
            "description": "Title to search for. It takes precedence over the author",
            "example": "Let it Be"
          },
          "author": {
            "type": "string",
            "required": true,
            "description": "Author to search for",
            "example": "Craig Nicolas"
          },
          "withProfile": {
            "type": "boolean",
            "required": true,
            "description": "If true, it searches books assigned to the user. Otherwise searches in the whole store"
          }
        }
      },
      "getMessages": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "required": true,
            "example": 20
          },
          "offset": {
            "type": "integer",
            "required": true,
            "example": 0
          }
        }
      },
      "sendMessage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "required": true,
            "description": "Message to others"
          }
        }
      },
      "sendFile": {
        "multipart/form-data": {
          "schema": {
            "type": "object",
            "properties": {
              "file": {
                "type": "string",
                "format": "binary",
                "required": true
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "token": {
        "in": "cookie",
        "name": "token",
        "type": "apiKey",
        "description": "Auth token (jwt) generated with /login or /loginWithFacebook"
      }
    }
  }
}